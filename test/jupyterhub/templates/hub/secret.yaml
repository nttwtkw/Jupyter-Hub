---
# Source: jupyterhub/templates/hub/secret.yaml
kind: Secret
apiVersion: v1
metadata:
  name: hub
  labels:
    component: hub
    app: jupyterhub
    release: jhub
    chart: jupyterhub-1.1.4
    heritage: Helm
type: Opaque
data:
  values.yaml: ""

  # Any JupyterHub Services api_tokens are exposed in this k8s Secret as a
  # convinience for external services running in the k8s cluster that could
  # mount them directly from this k8s Secret.

  # During Helm template rendering, these values that can be autogenerated for
  # users are set using the following logic:
  #
  # 1. Use chart configuration's value
  # 2. Use k8s Secret's value
  # 3. Use a new autogenerated value
  #
  # hub.config.ConfigurableHTTPProxy.auth_token: for hub to proxy-api authorization (JupyterHub.proxy_auth_token is deprecated)
  # hub.config.JupyterHub.cookie_secret:         for cookie encryption
  # hub.config.CryptKeeper.keys:                 for auth state encryption
  #
  hub.config.ConfigurableHTTPProxy.auth_token: "UTFYWjZtOTZFSjIyZFBTN3A3aXVsMGdYVExVV2F4TGRrSGVXUjBXeTlxTlp3dVhobTJVMlRxWWxJbTFFWk1WRQ=="
  hub.config.JupyterHub.cookie_secret: "YjBjYmMwZTFjMWMwM2YzODYxYjFhMDM5MTE0MTY1ZTgwNmJhMjk1MmUwNzk5MzhmMjhhZThkOWRiYTMwYWNkYw=="
  hub.config.CryptKeeper.keys: "MTMzN2MwZTE1YjRiYzc2MDQ5YzVmMGRiNTE1MTQ1OTAzODE0OTIwZGYyMDMxOWE4YjljOWVmZDRkMDI5ZDJhNw=="
